// ==================== –£–õ–£–ß–®–ï–ù–ù–´–ï –ì–ï–ù–ï–†–ê–¢–û–†–´ –û–¢–ß–ï–¢–û–í ====================

/**
 * –£–ª—É—á—à–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–∞ –ø–æ –ø–µ—Ä–µ–∫–æ—Å–∞–º
 * –°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å –∞–Ω–∞–ª–∏–∑–æ–º –≥—Ä—É–ø–ø –º–∞—Å–µ–ª
 */
class ImprovedSkewsReporter {
  constructor(sheet, groups) {
    this.sheet = sheet;
    this.groups = groups;
  }
  
  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –ø–µ—Ä–µ–∫–æ—Å–∞–º
   */
  generate() {
    this.sheet.clear();
    this.createHeader();
    this.fillGroupData();
    this.addSummarySection();
    this.formatReport();
  }
  
  /**
   * –°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
   */
  createHeader() {
    const headers = [
      "–ì—Ä—É–ø–ø–∞ –º–∞—Å–µ–ª", "+++", "+", "N", "-", "---", "0", "R", 
      "–í—Å–µ–≥–æ –º–∞—Å–µ–ª", "–ú–∞—Å–ª–∞ –≤ –≥—Ä—É–ø–ø–µ", "–ü–≠ –ê–Ω–∞–ª–∏–∑", "–°–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑"
    ];
    
    this.sheet.getRange("A1:L1").setValues([headers])
      .setFontWeight("bold")
      .setBackground("#e8f4f8")
      .setHorizontalAlignment("center");
  }
  
  /**
   * –ó–∞–ø–æ–ª–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –≥—Ä—É–ø–ø–∞–º
   */
  fillGroupData() {
    let rowIndex = 2;
    
    Object.entries(this.groups).forEach(([groupName, groupData]) => {
      const [peAnalysis, sAnalysis] = this.analyzeGroup(groupName, groupData);
      const totalOils = CONFIG.ZONES.reduce((sum, zone) => sum + (groupData[zone] || 0), 0);
      
      const rowData = [
        groupName,
        groupData["+++"] || 0,
        groupData["+"] || 0,
        groupData["N"] || 0,
        groupData["-"] || 0,
        groupData["---"] || 0,
        groupData["0"] || 0,
        groupData["R"] || 0,
        totalOils,
        groupData.oils.join(", ") || "–ù–µ—Ç –º–∞—Å–µ–ª",
        peAnalysis,
        sAnalysis
      ];
      
      this.sheet.getRange(rowIndex, 1, 1, 12).setValues([rowData]);
      
      // –¶–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫
      if (totalOils > 5) {
        this.sheet.getRange(rowIndex, 1, 1, 12).setBackground("#fff2cc");
      } else if (totalOils === 0) {
        this.sheet.getRange(rowIndex, 1, 1, 12).setBackground("#f4cccc");
      }
      
      rowIndex++;
    });
  }
  
  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥—Ä—É–ø–ø—É –º–∞—Å–µ–ª
   * @param {string} groupName - –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
   * @param {Object} groupData - –î–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
   * @returns {Array} –ú–∞—Å—Å–∏–≤ —Å –ü–≠ –∏ —Å–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∞–Ω–∞–ª–∏–∑–æ–º
   */
  analyzeGroup(groupName, groupData) {
    let peAnalysis = "";
    let sAnalysis = "";
    
    const positiveCount = (groupData["+++"] || 0) + (groupData["+"] || 0);
    const negativeCount = (groupData["---"] || 0) + (groupData["-"] || 0);
    const totalCount = CONFIG.ZONES.reduce((sum, zone) => sum + (groupData[zone] || 0), 0);
    
    switch (groupName) {
      case CONFIG.OIL_GROUPS.CITRUS:
        if (positiveCount >= 5) {
          peAnalysis = "–ü–ï–†–ï–ö–û–°: –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç —á—É–∂–æ–≥–æ –º–Ω–µ–Ω–∏—è";
          sAnalysis = "–†–ò–°–ö: –û–∫–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ç—Ä–µ—Å—Å";
        }
        if (negativeCount >= 5) {
          peAnalysis += (peAnalysis ? " | " : "") + "–ü–ï–†–ï–ö–û–°: –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –º–Ω–µ–Ω–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è";
          sAnalysis += (sAnalysis ? " | " : "") + "–†–ò–°–ö: –•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞—Å—Ç–æ–π–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã";
        }
        break;
        
      case CONFIG.OIL_GROUPS.CONIFEROUS:
        if (positiveCount + (groupData["0"] || 0) === 5) {
          peAnalysis = "–ö–†–ò–¢–ò–ß–ù–û: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–Ω–∏–∫–∏, –≥–∏–ø–µ—Ä—Å—Ç—Ä–µ—Å—Å";
        }
        if (negativeCount >= 5) {
          peAnalysis = "–†–ò–°–ö: –ü–æ—Ñ–∏–≥–∏–∑–º, –Ω–µ —á—É–≤—Å—Ç–≤—É–µ—Ç –æ–ø–∞—Å–Ω–æ—Å—Ç–∏";
        }
        if ((groupData["-"] || 0) > 0) {
          sAnalysis = "–í–ù–ò–ú–ê–ù–ò–ï: –û—Å—Ç—Ä—ã–π –≤–æ—Å–ø–∞–ª–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å";
        }
        break;
        
      case CONFIG.OIL_GROUPS.SPICE:
        if (positiveCount === 5) {
          peAnalysis = "–ü–û–¢–†–ï–ë–ù–û–°–¢–¨: –ü—Ä–∏–∑–Ω–∞–Ω–∏–µ, —Ç–µ–ø–ª–æ –∏ –∑–∞–±–æ—Ç–∞";
        }
        if (negativeCount >= 4) {
          sAnalysis = "–•–†–û–ù–ò–ß–ù–û: –ù–∞—Ä—É—à–µ–Ω–∏—è –ñ–ö–¢ –∏ —ç–Ω–¥–æ–∫—Ä–∏–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã";
        }
        break;
        
      case CONFIG.OIL_GROUPS.FLORAL:
        if ((groupData["N"] || 0) > 3) {
          peAnalysis = "–ù–û–†–ú–ê: –ü—Ä–∏–Ω—è—Ç–∏–µ –∂–µ–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –±–µ–∑ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è";
        }
        break;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–≥–æ –Ω–µ—Ç
    if (!peAnalysis && totalCount > 0) {
      if (positiveCount > negativeCount) {
        peAnalysis = "–ü—Ä–µ–æ–±–ª–∞–¥–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä—É—é—â–∏—Ö –º–∞—Å–µ–ª";
      } else if (negativeCount > positiveCount) {
        peAnalysis = "–ü—Ä–µ–æ–±–ª–∞–¥–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–Ω—ã—Ö –º–∞—Å–µ–ª";
      } else {
        peAnalysis = "–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ";
      }
    }
    
    if (!sAnalysis && totalCount > 0) {
      sAnalysis = totalCount > 3 ? "–ê–∫—Ç–∏–≤–Ω–∞—è –≥—Ä—É–ø–ø–∞" : "–£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å";
    }
    
    return [peAnalysis || "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", sAnalysis || "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"];
  }
  
  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç —Å–µ–∫—Ü–∏—é –æ–±—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
   */
  addSummarySection() {
    const startRow = Object.keys(this.groups).length + 3;
    
    this.sheet.getRange(startRow, 1).setValue("–û–ë–©–ò–ô –ê–ù–ê–õ–ò–ó –ü–ï–†–ï–ö–û–°–û–í:")
      .setFontWeight("bold").setFontSize(12);
    
    let summaryRow = startRow + 1;
    const totalOilsCount = Object.values(this.groups)
      .reduce((sum, group) => sum + CONFIG.ZONES.reduce((gSum, zone) => gSum + (group[zone] || 0), 0), 0);
    
    this.sheet.getRange(summaryRow++, 1, 1, 2)
      .setValues([["–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Å–µ–ª:", totalOilsCount]]);
    
    // –ê–Ω–∞–ª–∏–∑ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏—Ö –≥—Ä—É–ø–ø
    const dominantGroups = Object.entries(this.groups)
      .filter(([name, data]) => CONFIG.ZONES.reduce((sum, zone) => sum + (data[zone] || 0), 0) >= 3)
      .map(([name]) => name);
    
    this.sheet.getRange(summaryRow++, 1, 1, 2)
      .setValues([["–î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–µ –≥—Ä—É–ø–ø—ã:", dominantGroups.join(", ") || "–ù–µ—Ç –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏—Ö –≥—Ä—É–ø–ø"]]);
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    const recommendations = this.generateRecommendations();
    this.sheet.getRange(summaryRow++, 1).setValue("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
      .setFontWeight("bold");
    
    recommendations.forEach((rec, index) => {
      this.sheet.getRange(summaryRow + index, 1, 1, 3)
        .setValues([[`${index + 1}. ${rec}`, "", ""]]);
    });
  }
  
  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
   * @returns {Array} –ú–∞—Å—Å–∏–≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
   */
  generateRecommendations() {
    const recommendations = [];
    
    Object.entries(this.groups).forEach(([groupName, groupData]) => {
      const positiveCount = (groupData["+++"] || 0) + (groupData["+"] || 0);
      const negativeCount = (groupData["---"] || 0) + (groupData["-"] || 0);
      
      if (positiveCount >= 5 && groupName === CONFIG.OIL_GROUPS.CITRUS) {
        recommendations.push("–†–∞–±–æ—Ç–∞ —Å —Å–∞–º–æ–æ—Ü–µ–Ω–∫–æ–π –∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é –º–Ω–µ–Ω–∏—è (—Ü–∏—Ç—Ä—É—Å–æ–≤—ã–π –ø–µ—Ä–µ–∫–æ—Å)");
      }
      
      if (negativeCount >= 5 && groupName === CONFIG.OIL_GROUPS.CONIFEROUS) {
        recommendations.push("–û–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –≤–æ—Å–ø–∞–ª–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã (—Ö–≤–æ–π–Ω–∞—è –≥—Ä—É–ø–ø–∞)");
      }
      
      if (positiveCount === 5 && groupName === CONFIG.OIL_GROUPS.SPICE) {
        recommendations.push("–†–∞–±–æ—Ç–∞ —Å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å—é –≤ –ø—Ä–∏–∑–Ω–∞–Ω–∏–∏ –∏ –∑–∞–±–æ—Ç–µ (–ø—Ä—è–Ω–∞—è –≥—Ä—É–ø–ø–∞)");
      }
    });
    
    if (recommendations.length === 0) {
      recommendations.push("–ü–µ—Ä–µ–∫–æ—Å–æ–≤ –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ.");
    }
    
    return recommendations;
  }
  
  /**
   * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ –æ—Ç—á–µ—Ç—É
   */
  formatReport() {
    const lastRow = this.sheet.getLastRow();
    const lastColumn = 12;
    
    // –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
    this.sheet.getRange(1, 1, lastRow, lastColumn)
      .setBorder(true, true, true, true, true, true)
      .setWrap(true)
      .setVerticalAlignment("top");
    
    // –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
    for (let col = 1; col <= lastColumn; col++) {
      this.sheet.autoResizeColumn(col);
    }
    
    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    this.sheet.setColumnWidth(10, 300); // –ú–∞—Å–ª–∞ –≤ –≥—Ä—É–ø–ø–µ
    this.sheet.setColumnWidth(11, 250); // –ü–≠ –ê–Ω–∞–ª–∏–∑  
    this.sheet.setColumnWidth(12, 250); // –°–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
  }
}

/**
 * –£–ª—É—á—à–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
 * –°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏ –∏ —á–µ—Ç–∫–∏–º–∏ —Ä–∞–∑–¥–µ–ª–∞–º–∏
 */
class ImprovedOutputReporter {
  constructor(sheet, analysisResults, groups) {
    this.sheet = sheet;
    this.data = analysisResults;
    this.groups = groups;
    this.currentRow = 1;
  }
  
  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
   */
  generate() {
    this.sheet.clear();
    this.createMainHeader();
    this.createExecutiveSummary();
    this.createZoneAnalysisTable();
    this.createCombinationsTable();
    this.createSingleOilsTable();
    this.createPatternsSection();
    this.createRecommendationsSection();
    this.formatReport();
  }
  
  /**
   * –°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
   */
  createMainHeader() {
    const header = "üåø –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –ê–†–û–ú–ê–¢–ï–†–ê–ü–ò–ò –ü–û –ê–õ–ì–û–†–ò–¢–ú–£ 3.1 üåø";
    
    this.sheet.getRange(this.currentRow, 1).setValue(header)
      .setFontSize(16).setFontWeight("bold")
      .setHorizontalAlignment("center")
      .setBackground("#e8f4f8");
    
    this.sheet.getRange(this.currentRow, 1, 1, 6).merge();
    this.currentRow += 2;
  }
  
  /**
   * –°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ
   */
  createExecutiveSummary() {
    this.addSectionHeader("üìä –ö–†–ê–¢–ö–û–ï –†–ï–ó–Æ–ú–ï");
    
    const totalOils = Object.values(this.groups)
      .reduce((sum, group) => sum + CONFIG.ZONES.reduce((gSum, zone) => gSum + (group[zone] || 0), 0), 0);
    
    const summaryData = [
      ["–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Å–µ–ª:", totalOils],
      ["–†–∞–∑–º–µ—Ä –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–π –∑–æ–Ω—ã (N):", `${this.data.neutralZoneSize} ${this.data.neutralZoneSize > 3 ? '(–±–æ–ª—å—à–∞—è - –ø—Ä–∏–Ω—è—Ç–∏–µ)' : '(–º–∞–ª–µ–Ω—å–∫–∞—è - –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ)'}`],
      ["–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã (++++):", this.data.mainTasks.plusPlusPlusPE.length],
      ["–†–µ—Å—É—Ä—Å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (---):", this.data.mainTasks.minusMinusMinusPE.length],
      ["–ù–∞–π–¥–µ–Ω–æ —Å–æ—á–µ—Ç–∞–Ω–∏–π –º–∞—Å–µ–ª:", this.data.combinations.length],
      ["–ï–¥–∏–Ω–∏—á–Ω—ã–µ –º–∞—Å–ª–∞:", this.data.singleOils.length]
    ];
    
    this.addDataTable(summaryData, ["–ü–∞—Ä–∞–º–µ—Ç—Ä", "–ó–Ω–∞—á–µ–Ω–∏–µ"]);
    this.currentRow += 2;
  }
  
  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –∑–æ–Ω–∞–º
   */
  createZoneAnalysisTable() {
    this.addSectionHeader("üéØ –ê–ù–ê–õ–ò–ó –ü–û –ó–û–ù–ê–ú –í–û–ó–î–ï–ô–°–¢–í–ò–Ø");
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã (–∑–æ–Ω–∞ +++)
    if (this.data.mainTasks.plusPlusPlusPE.length > 0) {
      this.addSubsectionHeader("üö® –û–°–ù–û–í–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ (–ó–û–ù–ê +++)");
      
      const mainProblemsHeaders = ["–ú–∞—Å–ª–æ", "–ü—Å–∏—Ö–æ—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ", "–°–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ"];
      const mainProblemsData = [];
      
      for (let i = 0; i < Math.max(this.data.mainTasks.plusPlusPlusPE.length, this.data.mainTasks.plusPlusPlusS.length); i++) {
        const peEntry = this.data.mainTasks.plusPlusPlusPE[i] || "";
        const sEntry = this.data.mainTasks.plusPlusPlusS[i] || "";
        
        const peParts = peEntry.split(": ");
        const sParts = sEntry.split(": ");
        
        const oilName = peParts[0] || sParts[0] || "";
        const peDesc = peParts[1] || "";
        const sDesc = sParts[1] || "";
        
        mainProblemsData.push([oilName, peDesc, sDesc]);
      }
      
      this.addDataTable(mainProblemsData, mainProblemsHeaders);
      this.currentRow += 1;
    }
    
    // –†–µ—Å—É—Ä—Å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–∑–æ–Ω–∞ ---)
    if (this.data.mainTasks.minusMinusMinusPE.length > 0) {
      this.addSubsectionHeader("üí™ –†–ï–°–£–†–°–ù–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø (–ó–û–ù–ê ---)");
      
      const resourceHeaders = ["–ú–∞—Å–ª–æ", "–ü—Å–∏—Ö–æ—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ", "–°–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ"];
      const resourceData = [];
      
      for (let i = 0; i < Math.max(this.data.mainTasks.minusMinusMinusPE.length, this.data.mainTasks.minusMinusMinusS.length); i++) {
        const peEntry = this.data.mainTasks.minusMinusMinusPE[i] || "";
        const sEntry = this.data.mainTasks.minusMinusMinusS[i] || "";
        
        const peParts = peEntry.split(": ");
        const sParts = sEntry.split(": ");
        
        const oilName = peParts[0] || sParts[0] || "";
        const peDesc = peParts[1] || "";
        const sDesc = sParts[1] || "";
        
        resourceData.push([oilName, peDesc, sDesc]);
      }
      
      this.addDataTable(resourceData, resourceHeaders);
      this.currentRow += 1;
    }
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–æ–Ω—ã
    if (this.data.specialZones.zero.length > 0 || this.data.specialZones.reverse.length > 0) {
      this.addSubsectionHeader("‚ö° –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –ó–û–ù–´");
      
      const specialZonesData = [
        ["0-–∑–æ–Ω–∞ (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞):", this.data.specialZones.zero.join(", ") || "–ù–µ—Ç"],
        ["R-–∑–æ–Ω–∞ (—Ä–µ–≤–µ—Ä—Å):", this.data.specialZones.reverse.length === 1 ? 
          this.data.specialZones.reverse[0] : this.data.specialZones.reverse.join(", ") || "–ù–µ—Ç"]
      ];
      
      this.addDataTable(specialZonesData, ["–ó–æ–Ω–∞", "–ú–∞—Å–ª–∞"]);
      this.currentRow += 1;
    }
  }
  
  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å–æ—á–µ—Ç–∞–Ω–∏–π –º–∞—Å–µ–ª
   */
  createCombinationsTable() {
    if (this.data.combinations.length === 0) {
      this.addSectionHeader("üîó –°–û–ß–ï–¢–ê–ù–ò–Ø –ú–ê–°–ï–õ");
      this.sheet.getRange(this.currentRow, 1).setValue("–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ—á–µ—Ç–∞–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.");
      this.currentRow += 2;
      return;
    }
    
    this.addSectionHeader("üîó –ù–ê–ô–î–ï–ù–ù–´–ï –°–û–ß–ï–¢–ê–ù–ò–Ø –ú–ê–°–ï–õ");
    
    const combinationsHeaders = ["–û—Å–Ω–æ–≤–Ω–æ–µ –º–∞—Å–ª–æ", "–°–æ—á–µ—Ç–∞—é—â–∏–µ—Å—è –º–∞—Å–ª–∞", "–ó–æ–Ω—ã", "–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è"];
    const combinationsData = [];
    
    this.data.combinations.forEach(combo => {
      const foundOilsText = combo.foundOils.map(oil => oil.displayText).join(", ");
      const zonesText = combo.zones.join(", ");
      const resultsText = combo.results.join(" | ");
      
      combinationsData.push([
        combo.mainOil,
        foundOilsText,
        zonesText,
        resultsText
      ]);
    });
    
    this.addDataTable(combinationsData, combinationsHeaders);
    this.currentRow += 2;
  }
  
  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –µ–¥–∏–Ω–∏—á–Ω—ã—Ö –º–∞—Å–µ–ª
   */
  createSingleOilsTable() {
    if (this.data.singleOils.length === 0) {
      this.addSectionHeader("üîç –ï–î–ò–ù–ò–ß–ù–´–ï –ú–ê–°–õ–ê –í –ì–†–£–ü–ü–ê–•");
      this.sheet.getRange(this.currentRow, 1).setValue("–ï–¥–∏–Ω–∏—á–Ω—ã—Ö –º–∞—Å–µ–ª –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.");
      this.currentRow += 2;
      return;
    }
    
    this.addSectionHeader("üîç –ï–î–ò–ù–ò–ß–ù–´–ï –ú–ê–°–õ–ê –í –ì–†–£–ü–ü–ê–•");
    
    const singleOilsHeaders = ["‚Ññ", "–ú–∞—Å–ª–æ –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è"];
    const singleOilsData = this.data.singleOils.map((oil, index) => [index + 1, oil]);
    
    this.addDataTable(singleOilsData, singleOilsHeaders);
    this.currentRow += 2;
  }
  
  /**
   * –°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
   */
  createPatternsSection() {
    this.addSectionHeader("üîÑ –í–´–Ø–í–õ–ï–ù–ù–´–ï –ó–ê–ö–û–ù–û–ú–ï–†–ù–û–°–¢–ò");
    
    if (this.data.patterns.length === 0) {
      this.sheet.getRange(this.currentRow, 1).setValue("–û—Å–æ–±—ã—Ö –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–µ–π –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ.");
      this.currentRow += 2;
      return;
    }
    
    const patternsHeaders = ["‚Ññ", "–ó–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å"];
    const patternsData = this.data.patterns.map((pattern, index) => [index + 1, pattern]);
    
    this.addDataTable(patternsData, patternsHeaders);
    this.currentRow += 2;
  }
  
  /**
   * –°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
   */
  createRecommendationsSection() {
    this.addSectionHeader("üìã –ò–¢–û–ì–û–í–´–ï –í–´–í–û–î–´ –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò");
    
    // –ü—Å–∏—Ö–æ—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
    this.addSubsectionHeader("üß† –ü–°–ò–•–û–≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï");
    const peConclusion = this.generatePsychoemotionalConclusion();
    this.sheet.getRange(this.currentRow, 1, 1, 6).setValue(peConclusion).setWrap(true);
    this.currentRow += 2;
    
    // –°–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥
    this.addSubsectionHeader("üíä –°–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –°–û–°–¢–û–Ø–ù–ò–ï");
    const sConclusion = this.generateSomaticConclusion();
    this.sheet.getRange(this.currentRow, 1, 1, 6).setValue(sConclusion).setWrap(true);
    this.currentRow += 2;
    
    // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    this.addSubsectionHeader("‚úÖ –û–ë–©–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò");
    const recommendations = this.generateGeneralRecommendations();
    
    const recommendationsHeaders = ["‚Ññ", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è", "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç"];
    const recommendationsData = recommendations.map((rec, index) => [
      index + 1, 
      rec.text, 
      rec.priority
    ]);
    
    this.addDataTable(recommendationsData, recommendationsHeaders);
  }
  
  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
   * @param {string} title - –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
   */
  addSectionHeader(title) {
    this.sheet.getRange(this.currentRow, 1).setValue(title)
      .setFontSize(14).setFontWeight("bold")
      .setBackground("#f0f8ff");
    
    this.sheet.getRange(this.currentRow, 1, 1, 6).merge();
    this.currentRow += 1;
  }
  
  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–¥—Å–µ–∫—Ü–∏–∏
   * @param {string} title - –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–¥—Å–µ–∫—Ü–∏–∏
   */
  addSubsectionHeader(title) {
    this.sheet.getRange(this.currentRow, 1).setValue(title)
      .setFontSize(12).setFontWeight("bold")
      .setBackground("#f8f8ff");
    
    this.sheet.getRange(this.currentRow, 1, 1, 6).merge();
    this.currentRow += 1;
  }
  
  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã—Ö
   * @param {Array} data - –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
   * @param {Array} headers - –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
   */
  addDataTable(data, headers) {
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏
    this.sheet.getRange(this.currentRow, 1, 1, headers.length)
      .setValues([headers])
      .setFontWeight("bold")
      .setBackground("#e8f4f8")
      .setHorizontalAlignment("center");
    
    this.currentRow++;
    
    // –î–∞–Ω–Ω—ã–µ
    if (data.length > 0) {
      this.sheet.getRange(this.currentRow, 1, data.length, headers.length)
        .setValues(data)
        .setWrap(true)
        .setVerticalAlignment("top");
      
      this.currentRow += data.length;
    }
    
    // –ì—Ä–∞–Ω–∏—Ü—ã —Ç–∞–±–ª–∏—Ü—ã
    const tableRange = this.sheet.getRange(this.currentRow - data.length - 1, 1, data.length + 1, headers.length);
    tableRange.setBorder(true, true, true, true, true, true);
  }
  
  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—ã–≤–æ–¥ –ø–æ –ø—Å–∏—Ö–æ—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
   * @returns {string} –í—ã–≤–æ–¥
   */
  generatePsychoemotionalConclusion() {
    let conclusion = "";
    
    if (this.data.mainTasks.plusPlusPlusPE.length > 0) {
      conclusion += `–í—ã—è–≤–ª–µ–Ω—ã ${this.data.mainTasks.plusPlusPlusPE.length} –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Å–∏—Ö–æ—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –≤ –∑–æ–Ω–µ +++. `;
      
      if (this.data.patterns.length > 0) {
        conclusion += `–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã ${this.data.patterns.length} —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–µ–π. `;
      }
      
      if (this.data.mainTasks.minusMinusMinusPE.length > 0) {
        conclusion += `–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç ${this.data.mainTasks.minusMinusMinusPE.length} —Ä–µ—Å—É—Ä—Å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π (–∑–æ–Ω–∞ ---), —á—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è. `;
      } else {
        conclusion += "–†–µ—Å—É—Ä—Å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Ä–µ–∑–µ—Ä–≤–æ–≤. ";
      }
    } else {
      conclusion += "–û—Å—Ç—Ä—ã—Ö –ø—Å–∏—Ö–æ—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ. ";
    }
    
    const neutralAnalysis = this.data.neutralZoneSize > 3 ? 
      "–ë–æ–ª—å—à–∞—è –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏." : 
      "–ú–∞–ª–µ–Ω—å–∫–∞—è –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ.";
    
    conclusion += neutralAnalysis;
    
    return conclusion;
  }
  
  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—ã–≤–æ–¥ –ø–æ —Å–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
   * @returns {string} –í—ã–≤–æ–¥
   */
  generateSomaticConclusion() {
    let conclusion = "";
    
    if (this.data.mainTasks.plusPlusPlusS.length > 0 || this.data.mainTasks.minusMinusMinusS.length > 0) {
      conclusion += `–í—ã—è–≤–ª–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã: ${this.data.mainTasks.plusPlusPlusS.length} –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –∏ ${this.data.mainTasks.minusMinusMinusS.length} —Ä–µ—Å—É—Ä—Å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π. `;
      
      // –ê–Ω–∞–ª–∏–∑ –ø–æ –≥—Ä—É–ø–ø–∞–º –º–∞—Å–µ–ª
      const citrusGroup = this.groups[CONFIG.OIL_GROUPS.CITRUS];
      const coniferousGroup = this.groups[CONFIG.OIL_GROUPS.CONIFEROUS];
      const spiceGroup = this.groups[CONFIG.OIL_GROUPS.SPICE];
      
      const citrusIssues = ((citrusGroup["---"] || 0) + (citrusGroup["-"] || 0)) >= 5;
      const coniferousIssues = (coniferousGroup["-"] || 0) > 0 || (coniferousGroup["---"] || 0) > 0;
      const spiceIssues = ((spiceGroup["---"] || 0) + (spiceGroup["-"] || 0)) >= 5;
      
      if (citrusIssues || coniferousIssues || spiceIssues) {
        conclusion += "–í—ã—è–≤–ª–µ–Ω–Ω—ã–µ —Ä–∏—Å–∫–∏: ";
        const risks = [];
        if (citrusIssues) risks.push("–ø—Ä–æ–±–ª–µ–º—ã —Å –∫–∏—Å–ª–æ—Ç–Ω–æ-—â–µ–ª–æ—á–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º (—Ü–∏—Ç—Ä—É—Å–æ–≤—ã–µ)");
        if (coniferousIssues) risks.push("–æ—Å—Ç—Ä—ã–µ –≤–æ—Å–ø–∞–ª–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã (—Ö–≤–æ–π–Ω—ã–µ)");
        if (spiceIssues) risks.push("—Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –ñ–ö–¢ –∏ —ç–Ω–¥–æ–∫—Ä–∏–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã (–ø—Ä—è–Ω—ã–µ)");
        conclusion += risks.join(", ") + ". ";
      }
    } else {
      conclusion += "–°–µ—Ä—å–µ–∑–Ω—ã—Ö —Å–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ. ";
    }
    
    if (this.data.additionalTasks.plusS.length > 0) {
      conclusion += `–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≤—ã—è–≤–ª–µ–Ω—ã ${this.data.additionalTasks.plusS.length} –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –≤ –∑–æ–Ω–µ +.`;
    }
    
    return conclusion;
  }
  
  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
   * @returns {Array} –ú–∞—Å—Å–∏–≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
   */
  generateGeneralRecommendations() {
    const recommendations = [];
    
    // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    if (this.data.mainTasks.plusPlusPlusPE.length > 0) {
      recommendations.push({
        text: "–†–∞–±–æ—Ç–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –ø—Å–∏—Ö–æ—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏ (–∑–æ–Ω–∞ +++)",
        priority: "–í—ã—Å–æ–∫–∏–π"
      });
    }
    
    if (this.data.combinations.length > 0) {
      recommendations.push({
        text: `–£—á–µ—Å—Ç—å ${this.data.combinations.length} –≤—ã—è–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ—á–µ—Ç–∞–Ω–∏–π –º–∞—Å–µ–ª –≤ —Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–æ–π —Å—Ö–µ–º–µ`,
        priority: "–í—ã—Å–æ–∫–∏–π"
      });
    }
    
    // –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    if (this.data.singleOils.length > 0) {
      recommendations.push({
        text: "–û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –µ–¥–∏–Ω–∏—á–Ω—ã–º –º–∞—Å–ª–∞–º –≤ –≥—Ä—É–ø–ø–∞—Ö - –æ–Ω–∏ –º–æ–≥—É—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏",
        priority: "–°—Ä–µ–¥–Ω–∏–π"
      });
    }
    
    if (this.data.neutralZoneSize <= 3) {
      recommendations.push({
        text: "–†–∞–±–æ—Ç–∞ –ø–æ —Å–Ω–∏–∂–µ–Ω–∏—é –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è (–º–∞–ª–µ–Ω—å–∫–∞—è –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞)",
        priority: "–°—Ä–µ–¥–Ω–∏–π"
      });
    }
    
    // –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    if (this.data.additionalTasks.plusPE.length > 0 || this.data.additionalTasks.minusPE.length > 0) {
      recommendations.push({
        text: "–†–∞–±–æ—Ç–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Å–∏—Ö–æ—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏ (–∑–æ–Ω—ã + –∏ -)",
        priority: "–ù–∏–∑–∫–∏–π"
      });
    }
    
    if (recommendations.length === 0) {
      recommendations.push({
        text: "–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ.",
        priority: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
      });
    }
    
    return recommendations;
  }
  
  /**
   * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ –≤—Å–µ–º—É –æ—Ç—á–µ—Ç—É
   */
  formatReport() {
    // –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    for (let col = 1; col <= 6; col++) {
      this.sheet.autoResizeColumn(col);
    }
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —à–∏—Ä–∏–Ω—ã –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    this.sheet.setColumnWidth(1, Math.min(this.sheet.getColumnWidth(1), 200));
    this.sheet.setColumnWidth(2, Math.min(this.sheet.getColumnWidth(2), 300));
    this.sheet.setColumnWidth(3, Math.min(this.sheet.getColumnWidth(3), 250));
    this.sheet.setColumnWidth(4, Math.min(this.sheet.getColumnWidth(4), 400));
    
    // –û–±—â–µ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    const fullRange = this.sheet.getRange(1, 1, this.currentRow, 6);
    fullRange.setVerticalAlignment("top");
  }
}
