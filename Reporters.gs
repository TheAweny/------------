// ==================== –£–õ–£–ß–®–ï–ù–ù–´–ï –ì–ï–ù–ï–†–ê–¢–û–†–´ –û–¢–ß–ï–¢–û–í ====================

/**
 * –£–ª—É—á—à–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–∞ –ø–æ –ø–µ—Ä–µ–∫–æ—Å–∞–º
 * –°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å –∞–Ω–∞–ª–∏–∑–æ–º –≥—Ä—É–ø–ø –º–∞—Å–µ–ª
 */
class ImprovedSkewsReporter {
  constructor(sheet, groups) {
    this.sheet = sheet;
    this.groups = groups;
  }
  
  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –ø–µ—Ä–µ–∫–æ—Å–∞–º
   */
  generate() {
    this.sheet.clear();
    this.createHeader();
    this.fillGroupData();
    this.addSummarySection();
    this.formatReport();
  }
  
  /**
   * –°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
   */
  createHeader() {
    const headers = [
      "üåø –ì—Ä—É–ø–ø–∞ –º–∞—Å–µ–ª", "üî• +++", "‚ö° +", "‚ö™ N", "‚ö†Ô∏è -", "üíÄ ---", "üö´ 0", "üîÑ R", 
      "üìä –í—Å–µ–≥–æ", "üõ¢Ô∏è –ú–∞—Å–ª–∞ –≤ –≥—Ä—É–ø–ø–µ", "üß† –ü–≠ –ê–Ω–∞–ª–∏–∑", "üíä –°–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑"
    ];
    
    this.sheet.getRange("A1:L1").setValues([headers])
      .setFontWeight("bold")
      .setFontSize(11)
      .setBackground("#1f4e79")
      .setFontColor("white")
      .setHorizontalAlignment("center");
  }
  
  /**
   * –ó–∞–ø–æ–ª–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –≥—Ä—É–ø–ø–∞–º
   */
  fillGroupData() {
    let rowIndex = 2;
    
    Object.entries(this.groups).forEach(([groupName, groupData]) => {
      const [peAnalysis, sAnalysis] = this.analyzeGroup(groupName, groupData);
      const totalOils = CONFIG.ZONES.reduce((sum, zone) => sum + (groupData[zone] || 0), 0);
      
      const rowData = [
        groupName,
        groupData["+++"] || 0,
        groupData["+"] || 0,
        groupData["N"] || 0,
        groupData["-"] || 0,
        groupData["---"] || 0,
        groupData["0"] || 0,
        groupData["R"] || 0,
        totalOils,
        groupData.oils.join(", ") || "–ù–µ—Ç –º–∞—Å–µ–ª",
        peAnalysis,
        sAnalysis
      ];
      
      this.sheet.getRange(rowIndex, 1, 1, 12).setValues([rowData]);
      
      // –¶–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫
      if (totalOils > 5) {
        this.sheet.getRange(rowIndex, 1, 1, 12).setBackground("#fff2cc");
      } else if (totalOils === 0) {
        this.sheet.getRange(rowIndex, 1, 1, 12).setBackground("#f4cccc");
      } else if (totalOils <= 2) {
        this.sheet.getRange(rowIndex, 1, 1, 12).setBackground("#d5e8d4");
      }
      
      rowIndex++;
    });
  }
  
  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥—Ä—É–ø–ø—É –º–∞—Å–µ–ª
   * @param {string} groupName - –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
   * @param {Object} groupData - –î–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
   * @returns {Array} –ú–∞—Å—Å–∏–≤ —Å –ü–≠ –∏ —Å–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∞–Ω–∞–ª–∏–∑–æ–º
   */
  analyzeGroup(groupName, groupData) {
    let peAnalysis = "";
    let sAnalysis = "";
    
    const positiveCount = (groupData["+++"] || 0) + (groupData["+"] || 0);
    const negativeCount = (groupData["---"] || 0) + (groupData["-"] || 0);
    const totalCount = CONFIG.ZONES.reduce((sum, zone) => sum + (groupData[zone] || 0), 0);
    
    switch (groupName) {
      case CONFIG.OIL_GROUPS.CITRUS:
        if (positiveCount >= 5) {
          peAnalysis = "üö® –ü–ï–†–ï–ö–û–°: –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç —á—É–∂–æ–≥–æ –º–Ω–µ–Ω–∏—è";
          sAnalysis = "‚ö†Ô∏è –†–ò–°–ö: –û–∫–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ç—Ä–µ—Å—Å";
        }
        if (negativeCount >= 5) {
          peAnalysis += (peAnalysis ? " | " : "") + "üö® –ü–ï–†–ï–ö–û–°: –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –º–Ω–µ–Ω–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è";
          sAnalysis += (sAnalysis ? " | " : "") + "‚ö†Ô∏è –†–ò–°–ö: –•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞—Å—Ç–æ–π–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã";
        }
        break;
        
      case CONFIG.OIL_GROUPS.CONIFEROUS:
        if (positiveCount >= 4) {
          peAnalysis = "üö® –ü–ï–†–ï–ö–û–°: –û—Å—Ç—Ä—ã–µ –≤–æ—Å–ø–∞–ª–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã";
          sAnalysis = "‚ö†Ô∏è –†–ò–°–ö: –ù–∞—Ä—É—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –¶–ù–°";
        }
        if (negativeCount >= 4) {
          peAnalysis += (peAnalysis ? " | " : "") + "üö® –ü–ï–†–ï–ö–û–°: –•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ—Å–ø–∞–ª–µ–Ω–∏—è";
          sAnalysis += (sAnalysis ? " | " : "") + "‚ö†Ô∏è –†–ò–°–ö: –ó–∞—Å—Ç–æ–π–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã";
        }
        break;
        
      case CONFIG.OIL_GROUPS.SPICE:
        if (positiveCount >= 5) {
          peAnalysis = "üö® –ü–ï–†–ï–ö–û–°: –†–∞–±–æ—Ç–∞ —Å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å—é –≤ –ø—Ä–∏–∑–Ω–∞–Ω–∏–∏";
          sAnalysis = "‚ö†Ô∏è –†–ò–°–ö: –ù–∞—Ä—É—à–µ–Ω–∏—è –ñ–ö–¢ –∏ —ç–Ω–¥–æ–∫—Ä–∏–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã";
        }
        if (negativeCount >= 5) {
          peAnalysis += (peAnalysis ? " | " : "") + "üö® –ü–ï–†–ï–ö–û–°: –ü–æ–¥–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏–π";
          sAnalysis += (sAnalysis ? " | " : "") + "‚ö†Ô∏è –†–ò–°–ö: –•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è";
        }
        break;
        
      default:
        if (totalCount > 0) {
          peAnalysis = "üìä –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è";
          sAnalysis = "üìä –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è";
        }
    }
    
    if (!peAnalysis) {
      peAnalysis = "‚úÖ –ü–µ—Ä–µ–∫–æ—Å–æ–≤ –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ";
      sAnalysis = "‚úÖ –ü–µ—Ä–µ–∫–æ—Å–æ–≤ –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ";
    }
    
    return [peAnalysis, sAnalysis];
  }
  
  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç —Å–≤–æ–¥–Ω—É—é —Å–µ–∫—Ü–∏—é
   */
  addSummarySection() {
    const lastRow = this.sheet.getLastRow();
    const summaryRow = lastRow + 2;
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–≤–æ–¥–∫–∏
    this.sheet.getRange(summaryRow, 1).setValue("üìã –°–í–û–î–ö–ê –ü–û –ì–†–£–ü–ü–ê–ú")
      .setFontSize(14).setFontWeight("bold")
      .setBackground("#e8f4f8");
    
    this.sheet.getRange(summaryRow, 1, 1, 12).merge();
    
    // –î–∞–Ω–Ω—ã–µ —Å–≤–æ–¥–∫–∏
    const summaryData = this.generateSummaryData();
    const summaryHeaders = ["–ü–∞—Ä–∞–º–µ—Ç—Ä", "–ó–Ω–∞—á–µ–Ω–∏–µ", "–°—Ç–∞—Ç—É—Å"];
    
    this.addDataTable(summaryData, summaryHeaders, summaryRow + 1);
  }
  
  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–≤–æ–¥–∫–∏
   * @returns {Array} –ú–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö —Å–≤–æ–¥–∫–∏
   */
  generateSummaryData() {
    const summary = [];
    
    Object.entries(this.groups).forEach(([groupName, groupData]) => {
      const totalOils = CONFIG.ZONES.reduce((sum, zone) => sum + (groupData[zone] || 0), 0);
      const positiveCount = (groupData["+++"] || 0) + (groupData["+"] || 0);
      const negativeCount = (groupData["---"] || 0) + (groupData["-"] || 0);
      
      let status = "‚úÖ –ù–æ—Ä–º–∞";
      if (totalOils === 0) status = "‚ö†Ô∏è –ù–µ—Ç –º–∞—Å–µ–ª";
      else if (positiveCount >= 5 || negativeCount >= 5) status = "üö® –ü–µ—Ä–µ–∫–æ—Å";
      else if (totalOils <= 2) status = "üí° –ú–∞–ª–æ –º–∞—Å–µ–ª";
      
      summary.push([groupName, `${totalOils} –º–∞—Å–µ–ª`, status]);
    });
    
    return summary;
  }
  
  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã—Ö
   * @param {Array} data - –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
   * @param {Array} headers - –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
   * @param {number} startRow - –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
   */
  addDataTable(data, headers, startRow = 1) {
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏
    this.sheet.getRange(startRow, 1, 1, headers.length)
      .setValues([headers])
      .setFontWeight("bold")
      .setBackground("#e8f4f8")
      .setHorizontalAlignment("center");
    
    // –î–∞–Ω–Ω—ã–µ
    if (data.length > 0) {
      this.sheet.getRange(startRow + 1, 1, data.length, headers.length)
        .setValues(data)
        .setWrap(true)
        .setVerticalAlignment("top");
    }
    
    // –ì—Ä–∞–Ω–∏—Ü—ã —Ç–∞–±–ª–∏—Ü—ã
    const tableRange = this.sheet.getRange(startRow, 1, data.length + 1, headers.length);
    tableRange.setBorder(true, true, true, true, true, true);
  }
  
  /**
   * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ –æ—Ç—á–µ—Ç—É
   */
  formatReport() {
    const lastRow = this.sheet.getLastRow();
    const lastColumn = 12;
    
    // –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
    this.sheet.getRange(1, 1, lastRow, lastColumn)
      .setBorder(true, true, true, true, true, true)
      .setWrap(true)
      .setVerticalAlignment("top");
    
    // –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
    for (let col = 1; col <= lastColumn; col++) {
      this.sheet.autoResizeColumn(col);
    }
    
    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    this.sheet.setColumnWidth(10, 300); // –ú–∞—Å–ª–∞ –≤ –≥—Ä—É–ø–ø–µ
    this.sheet.setColumnWidth(11, 250); // –ü–≠ –ê–Ω–∞–ª–∏–∑  
    this.sheet.setColumnWidth(12, 250); // –°–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
  }
}

/**
 * –£–ª—É—á—à–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
 * –°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏ –∏ —á–µ—Ç–∫–∏–º–∏ —Ä–∞–∑–¥–µ–ª–∞–º–∏
 */
class ImprovedOutputReporter {
  constructor(sheet, analysisResults, groups, dictionary) {
    this.sheet = sheet;
    this.data = analysisResults;
    this.groups = groups;
    this.dictionary = dictionary;
    this.currentRow = 1;
  }
  
  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
   */
  generate() {
    this.sheet.clear();
    this.createMainHeader();
    this.createExecutiveSummary();
    this.createZoneAnalysisTable();
    this.createCombinationsTable();
    this.createSingleOilsTable();
    this.createPatternsSection();
    this.createRecommendationsSection();
    this.formatReport();
  }
  
  /**
   * –°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
   */
  createMainHeader() {
    const header = "üåø –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –ê–†–û–ú–ê–¢–ï–†–ê–ü–ò–ò –ü–û –ê–õ–ì–û–†–ò–¢–ú–£ 3.1 üåø";
    
    this.sheet.getRange(this.currentRow, 1).setValue(header)
      .setFontSize(18).setFontWeight("bold")
      .setHorizontalAlignment("center")
      .setBackground("#1f4e79")
      .setFontColor("white");
    
    this.sheet.getRange(this.currentRow, 1, 1, 8).merge();
    this.currentRow += 2;
  }
  
  /**
   * –°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ
   */
  createExecutiveSummary() {
    this.addSectionHeader("üìä –ö–†–ê–¢–ö–û–ï –†–ï–ó–Æ–ú–ï", "executive");
    
    const totalOils = Object.values(this.groups)
      .reduce((sum, group) => sum + CONFIG.ZONES.reduce((gSum, zone) => gSum + (group[zone] || 0), 0), 0);
    
    const summaryData = [
      ["üî¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Å–µ–ª:", totalOils, this.getStatusForTotal(totalOils)],
      ["‚ö™ –†–∞–∑–º–µ—Ä –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–π –∑–æ–Ω—ã (N):", `${this.data.neutralZoneSize}`, this.getStatusForNeutral(this.data.neutralZoneSize)],
      ["üö® –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã (++++):", this.data.mainTasks.plusPlusPlusPE.length, this.getStatusForProblems(this.data.mainTasks.plusPlusPlusPE.length)],
      ["üí™ –†–µ—Å—É—Ä—Å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (---):", this.data.mainTasks.minusMinusMinusPE.length, this.getStatusForResources(this.data.mainTasks.minusMinusMinusPE.length)],
      ["üîó –ù–∞–π–¥–µ–Ω–æ —Å–æ—á–µ—Ç–∞–Ω–∏–π –º–∞—Å–µ–ª:", this.data.combinations.length, this.getStatusForCombinations(this.data.combinations.length)],
      ["üîç –ï–¥–∏–Ω–∏—á–Ω—ã–µ –º–∞—Å–ª–∞:", this.data.singleOils.length, this.getStatusForSingleOils(this.data.singleOils.length)]
    ];
    
    this.addDataTable(summaryData, ["–ü–∞—Ä–∞–º–µ—Ç—Ä", "–ó–Ω–∞—á–µ–Ω–∏–µ", "–°—Ç–∞—Ç—É—Å"]);
    this.currentRow += 2;
  }
  
  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –∑–æ–Ω–∞–º
   */
  createZoneAnalysisTable() {
    this.addSectionHeader("üéØ –ê–ù–ê–õ–ò–ó –ü–û –ó–û–ù–ê–ú –í–û–ó–î–ï–ô–°–¢–í–ò–Ø", "zones");
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã (–∑–æ–Ω–∞ +++)
    if (this.data.mainTasks.plusPlusPlusPE.length > 0) {
      this.addSubsectionHeader("üö® –û–°–ù–û–í–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ (–ó–û–ù–ê +++)", "problems");
      
      const mainProblemsHeaders = ["üõ¢Ô∏è –ú–∞—Å–ª–æ", "üß† –ü—Å–∏—Ö–æ—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ", "üíä –°–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ", "üìä –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç"];
      const mainProblemsData = [];
      
      for (let i = 0; i < Math.max(this.data.mainTasks.plusPlusPlusPE.length, this.data.mainTasks.plusPlusPlusS.length); i++) {
        const peEntry = this.data.mainTasks.plusPlusPlusPE[i] || "";
        const sEntry = this.data.mainTasks.plusPlusPlusS[i] || "";
        
        const peParts = peEntry.split(": ");
        const sParts = sEntry.split(": ");
        
        const oilName = peParts[0] || sParts[0] || "";
        const peDesc = peParts[1] || "";
        const sDesc = sParts[1] || "";
        const priority = this.getPriorityForOil(oilName, "+++");
        
        mainProblemsData.push([oilName, peDesc, sDesc, priority]);
      }
      
      this.addDataTable(mainProblemsData, mainProblemsHeaders);
      this.currentRow += 1;
    }
    
    // –†–µ—Å—É—Ä—Å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–∑–æ–Ω–∞ ---)
    if (this.data.mainTasks.minusMinusMinusPE.length > 0) {
      this.addSubsectionHeader("üí™ –†–ï–°–£–†–°–ù–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø (–ó–û–ù–ê ---)", "resources");
      
      const resourceHeaders = ["üõ¢Ô∏è –ú–∞—Å–ª–æ", "üß† –ü—Å–∏—Ö–æ—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ", "üíä –°–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ", "üìä –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª"];
      const resourceData = [];
      
      for (let i = 0; i < Math.max(this.data.mainTasks.minusMinusMinusPE.length, this.data.mainTasks.minusMinusMinusS.length); i++) {
        const peEntry = this.data.mainTasks.minusMinusMinusPE[i] || "";
        const sEntry = this.data.mainTasks.minusMinusMinusS[i] || "";
        
        const peParts = peEntry.split(": ");
        const sParts = sEntry.split(": ");
        
        const oilName = peParts[0] || sParts[0] || "";
        const peDesc = peParts[1] || "";
        const sDesc = sParts[1] || "";
        const potential = this.getPotentialForOil(oilName, "---");
        
        resourceData.push([oilName, peDesc, sDesc, potential]);
      }
      
      this.addDataTable(resourceData, resourceHeaders);
      this.currentRow += 1;
    }
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–æ–Ω—ã
    if (this.data.specialZones.zero.length > 0 || this.data.specialZones.reverse.length > 0) {
      this.addSubsectionHeader("‚ö° –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –ó–û–ù–´", "special");
      
      const specialZonesData = [
        ["üö´ 0-–∑–æ–Ω–∞ (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞):", this.data.specialZones.zero.join(", ") || "–ù–µ—Ç", this.getStatusForSpecialZone(this.data.specialZones.zero.length)],
        ["üîÑ R-–∑–æ–Ω–∞ (—Ä–µ–≤–µ—Ä—Å):", this.data.specialZones.reverse.length === 1 ? 
          this.data.specialZones.reverse[0] : this.data.specialZones.reverse.join(", ") || "–ù–µ—Ç", this.getStatusForSpecialZone(this.data.specialZones.reverse.length)]
      ];
      
      this.addDataTable(specialZonesData, ["–ó–æ–Ω–∞", "–ú–∞—Å–ª–∞", "–°—Ç–∞—Ç—É—Å"]);
      this.currentRow += 1;
    }
  }
  
  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å–æ—á–µ—Ç–∞–Ω–∏–π –º–∞—Å–µ–ª
   */
  createCombinationsTable() {
    if (this.data.combinations.length === 0) {
      this.addSectionHeader("üîó –°–û–ß–ï–¢–ê–ù–ò–Ø –ú–ê–°–ï–õ", "combinations");
      this.sheet.getRange(this.currentRow, 1).setValue("‚úÖ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ—á–µ—Ç–∞–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.");
      this.currentRow += 2;
      return;
    }
    
    this.addSectionHeader("üîó –ù–ê–ô–î–ï–ù–ù–´–ï –°–û–ß–ï–¢–ê–ù–ò–Ø –ú–ê–°–ï–õ", "combinations");
    
    const combinationsHeaders = ["üõ¢Ô∏è –û—Å–Ω–æ–≤–Ω–æ–µ –º–∞—Å–ª–æ", "üîó –°–æ—á–µ—Ç–∞—é—â–∏–µ—Å—è –º–∞—Å–ª–∞", "üéØ –ó–æ–Ω—ã", "üìù –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è", "üìä –ì—Ä—É–ø–ø–∞"];
    const combinationsData = [];
    
    this.data.combinations.forEach(combo => {
      const foundOilsText = combo.foundOils.map(oil => oil.displayText).join(", ");
      const zonesText = combo.zones.join(", ");
      const groupName = this.getGroupForOil(combo.mainOil);
      
      combinationsData.push([
        `${combo.mainOil} (${combo.mainOilZone}${combo.mainOilTroika ? `, —Ç–æ–ø ${combo.mainOilTroika}` : ''})`,
        foundOilsText,
        zonesText,
        combo.interpretation,
        groupName
      ]);
    });
    
    this.addDataTable(combinationsData, combinationsHeaders);
    this.currentRow += 2;
  }
  
  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –µ–¥–∏–Ω–∏—á–Ω—ã—Ö –º–∞—Å–µ–ª
   */
  createSingleOilsTable() {
    if (this.data.singleOils.length === 0) {
      this.addSectionHeader("üîç –ï–î–ò–ù–ò–ß–ù–´–ï –ú–ê–°–õ–ê –í –ì–†–£–ü–ü–ê–•", "single");
      this.sheet.getRange(this.currentRow, 1).setValue("‚úÖ –ï–¥–∏–Ω–∏—á–Ω—ã—Ö –º–∞—Å–µ–ª –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.");
      this.currentRow += 2;
      return;
    }
    
    this.addSectionHeader("üîç –ï–î–ò–ù–ò–ß–ù–´–ï –ú–ê–°–õ–ê –í –ì–†–£–ü–ü–ê–•", "single");
    
    const singleOilsHeaders = ["üî¢ ‚Ññ", "üõ¢Ô∏è –ú–∞—Å–ª–æ –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è", "üìä –ì—Ä—É–ø–ø–∞"];
    const singleOilsData = this.data.singleOils.map((oil, index) => {
      const oilName = oil.split(':')[0];
      const groupName = this.getGroupForOil(oilName);
      return [index + 1, oil, groupName];
    });
    
    this.addDataTable(singleOilsData, singleOilsHeaders);
    this.currentRow += 2;
  }
  
  /**
   * –°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
   */
  createPatternsSection() {
    this.addSectionHeader("üîÑ –í–´–Ø–í–õ–ï–ù–ù–´–ï –ó–ê–ö–û–ù–û–ú–ï–†–ù–û–°–¢–ò", "patterns");
    
    if (this.data.patterns.length === 0) {
      this.sheet.getRange(this.currentRow, 1).setValue("‚úÖ –û—Å–æ–±—ã—Ö –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–µ–π –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ.");
      this.currentRow += 2;
      return;
    }
    
    const patternsHeaders = ["üî¢ ‚Ññ", "üìä –ó–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å", "üéØ –¢–∏–ø"];
    const patternsData = this.data.patterns.map((pattern, index) => {
      const type = this.getPatternType(pattern);
      return [index + 1, pattern, type];
    });
    
    this.addDataTable(patternsData, patternsHeaders);
    this.currentRow += 2;
  }
  
  /**
   * –°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
   */
  createRecommendationsSection() {
    this.addSectionHeader("üìã –ò–¢–û–ì–û–í–´–ï –í–´–í–û–î–´ –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò", "recommendations");
    
    // –ü—Å–∏—Ö–æ—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
    this.addSubsectionHeader("üß† –ü–°–ò–•–û–≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï", "pe");
    const peConclusion = this.generatePsychoemotionalConclusion();
    this.sheet.getRange(this.currentRow, 1, 1, 8).setValue(peConclusion).setWrap(true);
    this.currentRow += 2;
    
    // –°–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥
    this.addSubsectionHeader("üíä –°–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –°–û–°–¢–û–Ø–ù–ò–ï", "somatic");
    const sConclusion = this.generateSomaticConclusion();
    this.sheet.getRange(this.currentRow, 1, 1, 8).setValue(sConclusion).setWrap(true);
    this.currentRow += 2;
    
    // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    this.addSubsectionHeader("‚úÖ –û–ë–©–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò", "general");
    const recommendations = this.generateGeneralRecommendations();
    
    const recommendationsHeaders = ["üî¢ ‚Ññ", "üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è", "üìä –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç", "‚è∞ –°—Ä–æ–∫–∏"];
    const recommendationsData = recommendations.map((rec, index) => [
      index + 1, 
      rec.text, 
      rec.priority,
      rec.timeline
    ]);
    
    this.addDataTable(recommendationsData, recommendationsHeaders);
  }
  
  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
   * @param {string} title - –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
   * @param {string} type - –¢–∏–ø —Å–µ–∫—Ü–∏–∏ –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
   */
  addSectionHeader(title, type = "default") {
    const colors = {
      "executive": "#1f4e79",
      "zones": "#2e7d32",
      "combinations": "#f57c00",
      "single": "#7b1fa2",
      "patterns": "#1976d2",
      "recommendations": "#d32f2f",
      "default": "#1f4e79"
    };
    
    this.sheet.getRange(this.currentRow, 1).setValue(title)
      .setFontSize(16).setFontWeight("bold")
      .setBackground(colors[type] || colors.default)
      .setFontColor("white");
    
    this.sheet.getRange(this.currentRow, 1, 1, 8).merge();
    this.currentRow += 1;
  }
  
  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–¥—Å–µ–∫—Ü–∏–∏
   * @param {string} title - –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–¥—Å–µ–∫—Ü–∏–∏
   * @param {string} type - –¢–∏–ø –ø–æ–¥—Å–µ–∫—Ü–∏–∏
   */
  addSubsectionHeader(title, type = "default") {
    const colors = {
      "problems": "#d32f2f",
      "resources": "#388e3c",
      "special": "#f57c00",
      "pe": "#1976d2",
      "somatic": "#7b1fa2",
      "general": "#2e7d32",
      "default": "#f0f8ff"
    };
    
    this.sheet.getRange(this.currentRow, 1).setValue(title)
      .setFontSize(14).setFontWeight("bold")
      .setBackground(colors[type] || colors.default)
      .setFontColor(colors[type] ? "white" : "black");
    
    this.sheet.getRange(this.currentRow, 1, 1, 8).merge();
    this.currentRow += 1;
  }
  
  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã—Ö
   * @param {Array} data - –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
   * @param {Array} headers - –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
   */
  addDataTable(data, headers) {
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏
    this.sheet.getRange(this.currentRow, 1, 1, headers.length)
      .setValues([headers])
      .setFontWeight("bold")
      .setBackground("#e8f4f8")
      .setHorizontalAlignment("center");
    
    this.currentRow++;
    
    // –î–∞–Ω–Ω—ã–µ
    if (data.length > 0) {
      this.sheet.getRange(this.currentRow, 1, data.length, headers.length)
        .setValues(data)
        .setWrap(true)
        .setVerticalAlignment("top");
      
      this.currentRow += data.length;
    }
    
    // –ì—Ä–∞–Ω–∏—Ü—ã —Ç–∞–±–ª–∏—Ü—ã
    const tableRange = this.sheet.getRange(this.currentRow - data.length - 1, 1, data.length + 1, headers.length);
    tableRange.setBorder(true, true, true, true, true, true);
  }
  
  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
  getStatusForTotal(total) {
    if (total === 0) return "‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö";
    if (total <= 10) return "‚úÖ –û–ø—Ç–∏–º–∞–ª—å–Ω–æ";
    if (total <= 20) return "‚ö†Ô∏è –ú–Ω–æ–≥–æ –º–∞—Å–µ–ª";
    return "üö® –û—á–µ–Ω—å –º–Ω–æ–≥–æ –º–∞—Å–µ–ª";
  }
  
  getStatusForNeutral(size) {
    if (size === 0) return "üö® –ù–µ—Ç –ø—Ä–∏–Ω—è—Ç–∏—è";
    if (size <= 3) return "‚ö†Ô∏è –ú–∞–ª–æ –ø—Ä–∏–Ω—è—Ç–∏—è";
    if (size <= 6) return "‚úÖ –£–º–µ—Ä–µ–Ω–Ω–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ";
    return "‚úÖ –•–æ—Ä–æ—à–µ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ";
  }
  
  getStatusForProblems(count) {
    if (count === 0) return "‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ—Ç";
    if (count <= 3) return "‚ö†Ô∏è –ù–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º";
    if (count <= 6) return "üö® –ú–Ω–æ–≥–æ –ø—Ä–æ–±–ª–µ–º";
    return "üö® –ö—Ä–∏—Ç–∏—á–Ω–æ –º–Ω–æ–≥–æ –ø—Ä–æ–±–ª–µ–º";
  }
  
  getStatusForResources(count) {
    if (count === 0) return "‚ö†Ô∏è –ù–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤";
    if (count <= 2) return "‚ö†Ô∏è –ú–∞–ª–æ —Ä–µ—Å—É—Ä—Å–æ–≤";
    if (count <= 4) return "‚úÖ –£–º–µ—Ä–µ–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã";
    return "‚úÖ –ú–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–æ–≤";
  }
  
  getStatusForCombinations(count) {
    if (count === 0) return "‚úÖ –ü—Ä–æ—Å—Ç–∞—è —Å—Ö–µ–º–∞";
    if (count <= 5) return "‚ö†Ô∏è –°—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å";
    if (count <= 10) return "üö® –°–ª–æ–∂–Ω–∞—è —Å—Ö–µ–º–∞";
    return "üö® –û—á–µ–Ω—å —Å–ª–æ–∂–Ω–∞—è —Å—Ö–µ–º–∞";
  }
  
  getStatusForSingleOils(count) {
    if (count === 0) return "‚úÖ –ì—Ä—É–ø–ø—ã —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã";
    if (count <= 3) return "‚ö†Ô∏è –ù–µ—Å–∫–æ–ª—å–∫–æ –µ–¥–∏–Ω–∏—á–Ω—ã—Ö";
    if (count <= 6) return "üö® –ú–Ω–æ–≥–æ –µ–¥–∏–Ω–∏—á–Ω—ã—Ö";
    return "üö® –ö—Ä–∏—Ç–∏—á–Ω–æ –º–Ω–æ–≥–æ –µ–¥–∏–Ω–∏—á–Ω—ã—Ö";
  }
  
  getPriorityForOil(oilName, zone) {
    if (zone === "+++") return "üî¥ –í—ã—Å–æ–∫–∏–π";
    if (zone === "+") return "üü° –°—Ä–µ–¥–Ω–∏–π";
    return "üü¢ –ù–∏–∑–∫–∏–π";
  }
  
  getPotentialForOil(oilName, zone) {
    if (zone === "---") return "üí™ –í—ã—Å–æ–∫–∏–π";
    if (zone === "-") return "‚ö†Ô∏è –°—Ä–µ–¥–Ω–∏–π";
    return "üü¢ –ù–∏–∑–∫–∏–π";
  }
  
  getStatusForSpecialZone(count) {
    if (count === 0) return "‚úÖ –ù–µ—Ç";
    if (count === 1) return "‚ö†Ô∏è –û–¥–Ω–æ –º–∞—Å–ª–æ";
    return "üö® –ù–µ—Å–∫–æ–ª—å–∫–æ –º–∞—Å–µ–ª";
  }
  
  getGroupForOil(oilName) {
    // –ò—â–µ–º –≥—Ä—É–ø–ø—É –º–∞—Å–ª–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ
    for (const [key, entry] of this.dictionary.entries()) {
      if (key.startsWith(oilName + "|")) {
        return entry.group || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
      }
    }
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
  }
  
  getPatternType(pattern) {
    if (pattern.includes("—Å–æ—á–µ—Ç–∞–Ω–∏–π")) return "üîó –°–æ—á–µ—Ç–∞–Ω–∏—è";
    if (pattern.includes("–≥—Ä—É–ø–ø–∞")) return "üåø –ì—Ä—É–ø–ø–∞";
    if (pattern.includes("–∑–æ–Ω–∞")) return "üéØ –ó–æ–Ω–∞";
    return "üìä –û–±—â–∏–π";
  }
  
  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—ã–≤–æ–¥ –ø–æ –ø—Å–∏—Ö–æ—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
   * @returns {string} –í—ã–≤–æ–¥
   */
  generatePsychoemotionalConclusion() {
    let conclusion = "";
    
    if (this.data.mainTasks.plusPlusPlusPE.length > 0) {
      conclusion += `–í—ã—è–≤–ª–µ–Ω—ã ${this.data.mainTasks.plusPlusPlusPE.length} –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Å–∏—Ö–æ—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –≤ –∑–æ–Ω–µ +++. `;
      
      if (this.data.patterns.length > 0) {
        conclusion += `–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã ${this.data.patterns.length} —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–µ–π. `;
      }
      
      if (this.data.mainTasks.minusMinusMinusPE.length > 0) {
        conclusion += `–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç ${this.data.mainTasks.minusMinusMinusPE.length} —Ä–µ—Å—É—Ä—Å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π (–∑–æ–Ω–∞ ---), —á—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è. `;
      } else {
        conclusion += "–†–µ—Å—É—Ä—Å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Ä–µ–∑–µ—Ä–≤–æ–≤. ";
      }
    } else {
      conclusion += "–û—Å—Ç—Ä—ã—Ö –ø—Å–∏—Ö–æ—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ. ";
    }
    
    const neutralAnalysis = this.data.neutralZoneSize > 3 ? 
      "–ë–æ–ª—å—à–∞—è –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏." : 
      "–ú–∞–ª–µ–Ω—å–∫–∞—è –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ.";
    
    conclusion += neutralAnalysis;
    
    return conclusion;
  }
  
  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—ã–≤–æ–¥ –ø–æ —Å–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
   * @returns {string} –í—ã–≤–æ–¥
   */
  generateSomaticConclusion() {
    let conclusion = "";
    
    if (this.data.mainTasks.plusPlusPlusS.length > 0 || this.data.mainTasks.minusMinusMinusS.length > 0) {
      conclusion += `–í—ã—è–≤–ª–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã: ${this.data.mainTasks.plusPlusPlusS.length} –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –∏ ${this.data.mainTasks.minusMinusMinusS.length} —Ä–µ—Å—É—Ä—Å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π. `;
      
      // –ê–Ω–∞–ª–∏–∑ –ø–æ –≥—Ä—É–ø–ø–∞–º –º–∞—Å–µ–ª
      const citrusGroup = this.groups[CONFIG.OIL_GROUPS.CITRUS];
      const coniferousGroup = this.groups[CONFIG.OIL_GROUPS.CONIFEROUS];
      const spiceGroup = this.groups[CONFIG.OIL_GROUPS.SPICE];
      
      const citrusIssues = ((citrusGroup["---"] || 0) + (citrusGroup["-"] || 0)) >= 5;
      const coniferousIssues = (coniferousGroup["-"] || 0) > 0 || (coniferousGroup["---"] || 0) > 0;
      const spiceIssues = ((spiceGroup["---"] || 0) + (spiceGroup["-"] || 0)) >= 5;
      
      if (citrusIssues || coniferousIssues || spiceIssues) {
        conclusion += "–í—ã—è–≤–ª–µ–Ω–Ω—ã–µ —Ä–∏—Å–∫–∏: ";
        const risks = [];
        if (citrusIssues) risks.push("–ø—Ä–æ–±–ª–µ–º—ã —Å –∫–∏—Å–ª–æ—Ç–Ω–æ-—â–µ–ª–æ—á–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º (—Ü–∏—Ç—Ä—É—Å–æ–≤—ã–µ)");
        if (coniferousIssues) risks.push("–æ—Å—Ç—Ä—ã–µ –≤–æ—Å–ø–∞–ª–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã (—Ö–≤–æ–π–Ω—ã–µ)");
        if (spiceIssues) risks.push("—Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –ñ–ö–¢ –∏ —ç–Ω–¥–æ–∫—Ä–∏–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã (–ø—Ä—è–Ω—ã–µ)");
        conclusion += risks.join(", ") + ". ";
      }
    } else {
      conclusion += "–°–µ—Ä—å–µ–∑–Ω—ã—Ö —Å–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ. ";
    }
    
    if (this.data.additionalTasks.plusS.length > 0) {
      conclusion += `–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≤—ã—è–≤–ª–µ–Ω—ã ${this.data.additionalTasks.plusS.length} –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –≤ –∑–æ–Ω–µ +.`;
    }
    
    return conclusion;
  }
  
  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
   * @returns {Array} –ú–∞—Å—Å–∏–≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
   */
  generateGeneralRecommendations() {
    const recommendations = [];
    
    // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    if (this.data.mainTasks.plusPlusPlusPE.length > 0) {
      recommendations.push({
        text: "–†–∞–±–æ—Ç–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –ø—Å–∏—Ö–æ—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏ (–∑–æ–Ω–∞ +++)",
        priority: "üî¥ –í—ã—Å–æ–∫–∏–π",
        timeline: "1-2 –Ω–µ–¥–µ–ª–∏"
      });
    }
    
    if (this.data.combinations.length > 0) {
      recommendations.push({
        text: `–£—á–µ—Å—Ç—å ${this.data.combinations.length} –≤—ã—è–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ—á–µ—Ç–∞–Ω–∏–π –º–∞—Å–µ–ª –≤ —Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–æ–π —Å—Ö–µ–º–µ`,
        priority: "üî¥ –í—ã—Å–æ–∫–∏–π",
        timeline: "–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ"
      });
    }
    
    // –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    if (this.data.singleOils.length > 0) {
      recommendations.push({
        text: "–û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –µ–¥–∏–Ω–∏—á–Ω—ã–º –º–∞—Å–ª–∞–º –≤ –≥—Ä—É–ø–ø–∞—Ö - –æ–Ω–∏ –º–æ–≥—É—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏",
        priority: "üü° –°—Ä–µ–¥–Ω–∏–π",
        timeline: "2-3 –Ω–µ–¥–µ–ª–∏"
      });
    }
    
    if (this.data.neutralZoneSize <= 3) {
      recommendations.push({
        text: "–†–∞–±–æ—Ç–∞ –ø–æ —Å–Ω–∏–∂–µ–Ω–∏—é –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è (–º–∞–ª–µ–Ω—å–∫–∞—è –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞)",
        priority: "üü° –°—Ä–µ–¥–Ω–∏–π",
        timeline: "3-4 –Ω–µ–¥–µ–ª–∏"
      });
    }
    
    // –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    if (this.data.additionalTasks.plusPE.length > 0 || this.data.additionalTasks.minusPE.length > 0) {
      recommendations.push({
        text: "–†–∞–±–æ—Ç–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Å–∏—Ö–æ—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏ (–∑–æ–Ω—ã + –∏ -)",
        priority: "üü¢ –ù–∏–∑–∫–∏–π",
        timeline: "4-6 –Ω–µ–¥–µ–ª—å"
      });
    }
    
    if (recommendations.length === 0) {
      recommendations.push({
        text: "–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ.",
        priority: "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
        timeline: "–ü–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"
      });
    }
    
    return recommendations;
  }
  
  /**
   * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ –≤—Å–µ–º—É –æ—Ç—á–µ—Ç—É
   */
  formatReport() {
    // –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    for (let col = 1; col <= 8; col++) {
      this.sheet.autoResizeColumn(col);
    }
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —à–∏—Ä–∏–Ω—ã –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    this.sheet.setColumnWidth(1, Math.min(this.sheet.getColumnWidth(1), 200));
    this.sheet.setColumnWidth(2, Math.min(this.sheet.getColumnWidth(2), 300));
    this.sheet.setColumnWidth(3, Math.min(this.sheet.getColumnWidth(3), 250));
    this.sheet.setColumnWidth(4, Math.min(this.sheet.getColumnWidth(4), 400));
    
    // –û–±—â–µ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    const fullRange = this.sheet.getRange(1, 1, this.currentRow, 8);
    fullRange.setVerticalAlignment("top");
  }
}
