// ==================== –£–¢–ò–õ–ò–¢–´ –ò –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

/**
 * –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
 */
class Utils {
  /**
   * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —è—á–µ–π–∫–∏
   * @param {Range} range - –î–∏–∞–ø–∞–∑–æ–Ω —è—á–µ–π–∫–∏
   * @returns {string} –ó–Ω–∞—á–µ–Ω–∏–µ —è—á–µ–π–∫–∏ –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
   */
  static getCellValue(range) {
    try {
      const value = range.getValue();
      return value === null || value === undefined ? "" : value.toString();
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è —è—á–µ–π–∫–∏: ${error.message}`);
      return "";
    }
  }

  /**
   * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è —è—á–µ–π–∫–∏
   * @param {Range} range - –î–∏–∞–ø–∞–∑–æ–Ω —è—á–µ–π–∫–∏
   * @param {any} value - –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
   */
  static setCellValue(range, value) {
    try {
      range.setValue(value || "");
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è —è—á–µ–π–∫–∏: ${error.message}`);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞
   * @param {string} str - –°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
   * @returns {boolean} true –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞
   */
  static isNotEmpty(str) {
    return str && str.toString().trim() !== "";
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –ø–æ–ª–µ "–°–æ—á–µ—Ç–∞–Ω–∏—è" –≤–∏–¥–∞ "[1] ... [2] ..." –≤ —Å–ª–æ–≤–∞—Ä—å –Ω–æ–º–µ—Ä->–æ–ø–∏—Å–∞–Ω–∏–µ
   * @param {string} combosText - –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ—á–µ—Ç–∞–Ω–∏–π
   * @returns {Object} –û–±—ä–µ–∫—Ç { index: Map<number,string>, order: number[] }
   */
  static parseCombos(combosText) {
    const result = new Map();
    const order = [];
    
    if (!combosText || typeof combosText !== 'string') {
      return { index: result, order };
    }
    
    // –£–ª—É—á—à–µ–Ω–Ω—ã–π regex –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ—á–µ—Ç–∞–Ω–∏–π
    const regex = /\[(\d+)\]\s*([^\[]+?)(?=\s*\[\d+\]|$)/g;
    let match;
    
    while ((match = regex.exec(combosText)) !== null) {
      const num = parseInt(match[1], 10);
      let desc = match[2].trim();
      
      // –û—á–∏—â–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
      desc = desc.replace(/\s+/g, ' ').trim();
      
      if (!Number.isNaN(num) && desc.length > 0) {
        // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Ç–æ—á–∫–∏ –≤ –∫–æ–Ω—Ü–µ
        desc = desc.replace(/\s*\.\s*$/, '').trim();
        if (!desc.endsWith('.')) {
          desc += '.';
        }
        
        result.set(num, desc);
        order.push(num);
      }
    }
    
    return { index: result, order: order.sort((a, b) => a - b) };
  }

  /**
   * –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –≤–∏–¥–∞ "–°–º. —Å–æ—á–µ—Ç–∞–Ω–∏–µ [1],[2]" –≤ —è–≤–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –∏–∑ —Å–ª–æ–≤–∞—Ä—è —Å–æ—á–µ—Ç–∞–Ω–∏–π
   * @param {string} text - –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç (–ü–≠/–°)
   * @param {Map<number,string>} combosIndex - –°–ª–æ–≤–∞—Ä—å –Ω–æ–º–µ—Ä–æ–≤ –∫ –æ–ø–∏—Å–∞–Ω–∏—è–º
   * @returns {string} –¢–µ–∫—Å—Ç –±–µ–∑ —Å—Å—ã–ª–æ–∫ —Å –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞–º–∏
   */
  static expandCombinationReferences(text, combosIndex) {
    if (!text) return '';
    const numbers = new Set();
    const numRegex = /\[(\d+)\]/g;
    let m;
    while ((m = numRegex.exec(text)) !== null) {
      const n = parseInt(m[1], 10);
      if (!Number.isNaN(n)) numbers.add(n);
    }

    // –£–¥–∞–ª—è–µ–º —Ñ—Ä–∞–∑—ã "–°–º. —Å–æ—á–µ—Ç–∞–Ω–∏–µ(—è) ..."
    let cleaned = text
      .replace(/–°–º\.?\s*—Å–æ—á–µ—Ç–∞–Ω–∏[–µ—è][^\.]*\.?/gi, '')
      .replace(/\s{2,}/g, ' ')
      .trim();

    if (numbers.size === 0 || !combosIndex || combosIndex.size === 0) {
      return cleaned;
    }

    const additions = [];
    numbers.forEach((n) => {
      const desc = combosIndex.get(n);
      if (desc) additions.push(desc);
    });

    if (additions.length > 0) {
      const extra = additions.join(' ');
      cleaned = cleaned ? `${cleaned} ${extra}` : extra;
    }
    return cleaned.trim();
  }
  
  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –æ—Ç—á—ë—Ç–∞—Ö
   * @param {string} text - –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
   * @param {string} type - –¢–∏–ø —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
   */
  static formatReportText(text, type = 'data') {
    if (!text) return '';
    
    switch (type) {
      case 'header':
        return `\n${'='.repeat(80)}\n${text.toUpperCase()}\n${'='.repeat(80)}\n`;
      case 'subheader':
        return `\n${'-'.repeat(60)}\n${text}\n${'-'.repeat(60)}\n`;
      case 'emphasis':
        return `**${text}**`;
      case 'warning':
        return `‚ö†Ô∏è ${text}`;
      case 'success':
        return `‚úÖ ${text}`;
      case 'error':
        return `üö® ${text}`;
      default:
        return text;
    }
  }
  
  /**
   * –°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤
   * @param {Array} data - –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
   * @param {Array} headers - –ó–∞–≥–æ–ª–æ–≤–∫–∏
   * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
   */
  static createFormattedTable(data, headers) {
    if (!data || data.length === 0) return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è";
    
    let table = "\n";
    
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏
    table += "| " + headers.join(" | ") + " |\n";
    table += "| " + headers.map(() => "---").join(" | ") + " |\n";
    
    // –î–∞–Ω–Ω—ã–µ
    data.forEach(row => {
      table += "| " + row.join(" | ") + " |\n";
    });
    
    return table;
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –º–∞—Å–ª–∞
   * @param {string} oil - –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Å–ª–∞
   * @param {string} zone - –ó–æ–Ω–∞
   * @param {string} group - –ì—Ä—É–ø–ø–∞
   * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
   */
  static validateOilData(oil, zone, group) {
    const result = {
      isValid: true,
      errors: [],
      warnings: []
    };
    
    if (!oil || oil.trim() === '') {
      result.isValid = false;
      result.errors.push("–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Å–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
    }
    
    if (!zone || !CONFIG.ZONES.includes(zone)) {
      result.isValid = false;
      result.errors.push(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∑–æ–Ω–∞: ${zone}`);
    }
    
    if (group && !Object.values(CONFIG.OIL_GROUPS).includes(group)) {
      result.warnings.push(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞: ${group}`);
    }
    
    return result;
  }
  
  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –º–∞—Å–ª–∞
   * @param {string} oil - –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Å–ª–∞
   * @param {string} zone - –ó–æ–Ω–∞
   * @returns {string} –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
   */
  static generateOilKey(oil, zone) {
    return `${oil.trim()}|${zone}`;
  }
  
  /**
   * –û—á–∏—â–∞–µ—Ç –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ç–µ–∫—Å—Ç
   * @param {string} text - –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
   * @returns {string} –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
   */
  static cleanText(text) {
    if (!text) return '';
    
    return text
      .replace(/\s+/g, ' ')           // –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
      .replace(/\n+/g, ' ')           // –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –Ω–∞ –ø—Ä–æ–±–µ–ª—ã
      .replace(/[^\w\s\-\.\,\:\;\(\)\[\]]/g, '') // –£–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
      .trim();
  }
}
